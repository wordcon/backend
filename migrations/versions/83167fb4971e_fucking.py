"""fucking

Revision ID: 83167fb4971e
Revises:
Create Date: 2025-08-11 14:09:10.548175

"""

import warnings
from typing import TYPE_CHECKING

import sqlalchemy as sa
from advanced_alchemy.types import (
    GUID,
    ORA_JSONB,
    DateTimeUTC,
    EncryptedString,
    EncryptedText,
    StoredObject,
)
from alembic import op
from sqlalchemy import Text  # noqa: F401

if TYPE_CHECKING:
    pass

__all__ = ['downgrade', 'upgrade', 'schema_upgrades', 'schema_downgrades', 'data_upgrades', 'data_downgrades']

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText
sa.StoredObject = StoredObject

# revision identifiers, used by Alembic.
revision = '83167fb4971e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings('ignore', category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()


def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings('ignore', category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()


def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'users',
        sa.Column('email', sa.String(), nullable=False),
        sa.Column('hashed_password', sa.String(), nullable=False),
        sa.Column('username', sa.String(), nullable=False),
        sa.Column('name', sa.String(), nullable=True),
        sa.Column('status', sa.String(), nullable=True),
        sa.Column('avatar_url', sa.String(), nullable=True),
        sa.Column('banner_url', sa.String(), nullable=True),
        sa.Column('points', sa.Integer(), nullable=False),
        sa.Column('is_admin', sa.Boolean(), nullable=False),
        sa.Column('is_banned', sa.Boolean(), nullable=False),
        sa.Column('id', sa.GUID(length=16), nullable=False),
        sa.Column('sa_orm_sentinel', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column('updated_at', sa.DateTimeUTC(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

    op.create_table(
        'rooms',
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('category', sa.String(length=50), nullable=False),
        sa.Column('room_owner_id', sa.GUID(length=16), nullable=False),
        sa.Column('players_limit', sa.Integer(), nullable=False),
        sa.Column('turn_time', sa.Integer(), nullable=False),
        sa.Column('is_private', sa.Boolean(), nullable=False),
        sa.Column('has_password', sa.Boolean(), nullable=False),
        sa.Column('hashed_password', sa.String(), nullable=True),
        sa.Column('status', sa.String(length=20), nullable=False),
        sa.Column('id', sa.GUID(length=16), nullable=False),
        sa.Column('sa_orm_sentinel', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column('updated_at', sa.DateTimeUTC(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ['room_owner_id'], ['users.id'], name=op.f('fk_rooms_room_owner_id_users'), ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_rooms')),
    )
    with op.batch_alter_table('rooms', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_rooms_category'), ['category'], unique=False)
        batch_op.create_index(batch_op.f('ix_rooms_room_owner_id'), ['room_owner_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_rooms_status'), ['status'], unique=False)

    op.create_table(
        'games',
        sa.Column('room_id', sa.GUID(length=16), nullable=False),
        sa.Column('state', sa.String(length=20), nullable=False),
        sa.Column('round', sa.Integer(), nullable=False),
        sa.Column('turn_time', sa.Integer(), nullable=False),
        sa.Column('last_tick_at', sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column('end_date', sa.DateTimeUTC(timezone=True), nullable=True),
        sa.Column('id', sa.GUID(length=16), nullable=False),
        sa.Column('sa_orm_sentinel', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column('updated_at', sa.DateTimeUTC(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(['room_id'], ['rooms.id'], name=op.f('fk_games_room_id_rooms'), ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_games')),
    )
    with op.batch_alter_table('games', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_games_room_id'), ['room_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_games_state'), ['state'], unique=False)

    op.create_table(
        'room_players',
        sa.Column('room_id', sa.GUID(length=16), nullable=False),
        sa.Column('user_id', sa.GUID(length=16), nullable=False),
        sa.Column('is_owner', sa.Boolean(), nullable=False),
        sa.Column('id', sa.GUID(length=16), nullable=False),
        sa.Column('sa_orm_sentinel', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column('updated_at', sa.DateTimeUTC(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ['room_id'], ['rooms.id'], name=op.f('fk_room_players_room_id_rooms'), ondelete='CASCADE'
        ),
        sa.ForeignKeyConstraint(
            ['user_id'], ['users.id'], name=op.f('fk_room_players_user_id_users'), ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_room_players')),
        sa.UniqueConstraint('room_id', 'user_id', name='uq_room_user'),
    )
    with op.batch_alter_table('room_players', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_room_players_room_id'), ['room_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_room_players_user_id'), ['user_id'], unique=False)

    op.create_table(
        'game_players',
        sa.Column('game_id', sa.GUID(length=16), nullable=False),
        sa.Column('user_id', sa.GUID(length=16), nullable=False),
        sa.Column('points', sa.Integer(), nullable=False),
        sa.Column('place', sa.Integer(), nullable=True),
        sa.Column('id', sa.GUID(length=16), nullable=False),
        sa.Column('sa_orm_sentinel', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column('updated_at', sa.DateTimeUTC(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ['game_id'], ['games.id'], name=op.f('fk_game_players_game_id_games'), ondelete='CASCADE'
        ),
        sa.ForeignKeyConstraint(
            ['user_id'], ['users.id'], name=op.f('fk_game_players_user_id_users'), ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_game_players')),
        sa.UniqueConstraint('game_id', 'user_id', name='uq_game_user'),
    )
    with op.batch_alter_table('game_players', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_game_players_game_id'), ['game_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_game_players_user_id'), ['user_id'], unique=False)

    # ### end Alembic commands ###


def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('game_players', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_game_players_user_id'))
        batch_op.drop_index(batch_op.f('ix_game_players_game_id'))

    op.drop_table('game_players')
    with op.batch_alter_table('room_players', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_room_players_user_id'))
        batch_op.drop_index(batch_op.f('ix_room_players_room_id'))

    op.drop_table('room_players')
    with op.batch_alter_table('games', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_games_state'))
        batch_op.drop_index(batch_op.f('ix_games_room_id'))

    op.drop_table('games')
    with op.batch_alter_table('rooms', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_rooms_status'))
        batch_op.drop_index(batch_op.f('ix_rooms_room_owner_id'))
        batch_op.drop_index(batch_op.f('ix_rooms_category'))

    op.drop_table('rooms')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    # ### end Alembic commands ###


def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""


def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
